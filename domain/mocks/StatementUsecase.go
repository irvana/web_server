// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "web_server/domain"

	mock "github.com/stretchr/testify/mock"
)

// StatementUsecase is an autogenerated mock type for the StatementUsecase type
type StatementUsecase struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, req
func (_m *StatementUsecase) List(ctx context.Context, req domain.BaseRequest) (domain.StatementResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 domain.StatementResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.BaseRequest) domain.StatementResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.StatementResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.BaseRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStatementUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatementUsecase creates a new instance of StatementUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatementUsecase(t mockConstructorTestingTNewStatementUsecase) *StatementUsecase {
	mock := &StatementUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
