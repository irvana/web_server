// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "web_server/domain"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis"
)

// RateRepository is an autogenerated mock type for the RateRepository type
type RateRepository struct {
	mock.Mock
}

// ConsumeRate provides a mock function with given fields: ctx
func (_m *RateRepository) ConsumeRate(ctx context.Context) <-chan *redis.Message {
	ret := _m.Called(ctx)

	var r0 <-chan *redis.Message
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *redis.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}

	return r0
}

// PublishRate provides a mock function with given fields: ctx, rate
func (_m *RateRepository) PublishRate(ctx context.Context, rate domain.RateResponse) error {
	ret := _m.Called(ctx, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.RateResponse) error); ok {
		r0 = rf(ctx, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRateRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRateRepository creates a new instance of RateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRateRepository(t mockConstructorTestingTNewRateRepository) *RateRepository {
	mock := &RateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
